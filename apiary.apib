FORMAT: 1A

# Cetera -- Search Service

Features may not be implemented yet (such as the `highlight` option); however, we wish to future proof the API against version changes.
The flag `for_frontend` should be set to `true` for the frontend, although they may be ignored for now.
Once we understand the behavior for the civic hacker, we will optimize the use case to return the appropriate, less verbose payload.
Given that our internal resource names will change, we will require external documentation that shares the resource that a civic hacker can use to load a dataset or page from its id.

All calls will return a JSON object containing the list of datasets and pages in the relevance that is appropriate to the query in a field called `results`. This `results` array contains an array of hashes. Each hash contains a key `resource` containing the resource to be returned. Hashes may contain additional fields to `resource` including metadata about the resource. Each resource will be either a page or a dataset.

Pages and datasets may be distinguished by the `type` field. This is set to `dataset` for datasets and to `page` for pages. Additionally, the bodies differ from each other as follows:

Pages include the fields `pageId`, `datasetId`, and `cards`

Datasets include the fields `id` and `columns`

*Please note that we assume that all calls include either the `X-App-Token` header or the ``$$app_token`` parameters set to a valid token.*

# Search Endpoint [/catalog/v1]


+ Model (application/json)

            {
              "results": [
                {
                  "resource": {
                    "columns": [
                      {
                        "cardinality": 1,
                        "importance": 3,
                        "logicalDatatype": "category",
                        "name": "location_state",
                        "physicalDatatype": "text",
                        "title": "Location (state)"
                      },
                      {
                        "cardinality": 15,
                        "description": "City for the Public Library",
                        "importance": 3,
                        "logicalDatatype": "category",
                        "name": "city",
                        "physicalDatatype": "text",
                        "title": "CITY"
                      },
                      {
                        "cardinality": 23,
                        "description": "5 digit postal Zip Code for the Public Library",
                        "importance": 3,
                        "logicalDatatype": "category",
                        "name": "zipcode",
                        "physicalDatatype": "number",
                        "title": "ZIPCODE"
                      }
                    ],
                    "defaultAggregateColumn": "defaultAggregateColumn",
                    "defaultPage": "5b5c-jj6z",
                    "description": "Locations of all Montgomery County, MD Public Libraries.",
                    "domain": "moco-migrationtest.demo.socrata.com",
                    "id": "xqvj-wiwq",
                    "name": "Libraries",
                    "ownerId": "h6pt-apgn",
                    "rowDisplayUnit": "row",
                    "type": "dataset",
                    "updatedAt": "2015-01-06T16:59:37.000-08:00"
                  }
                },
                {
                  "resource": {
                    "cards": [
                      {
                        "activeFilters": [],
                        "cardCustomStyle": {},
                        "cardSize": 2,
                        "displayMode": "visualization",
                        "expanded": false,
                        "expandedCustomStyle": {},
                        "fieldName": ":@computed_region_p3v4_2swa"
                      }
                    ],
                    "datasetId": "xqvj-wiwq",
                    "description": "Locations of all Montgomery County, MD Public Libraries.",
                    "name": "Libraries",
                    "pageId": "5b5c-jj6z",
                    "rowDisplayUnit": "Row",
                    "type": "page"
                  }
                }
              ]
            }




## Searching particular domains [/catalog/v1{?domains}]
+ Parameters
    + domains (optional, list[string], `data.seattle.gov,data.kingcounty.gov`) ... A comma seperated list of cnames. Returns results restricted to only the domains in the list. When not present, searches the entire catalog.
    

### Domain Search API [GET]

+ Response 200
    
    [Search Endpoint][]

## Searching particular categories [/catalog/v1{?categories}]

    
+ Parameters
    + categories (optional, list[string], `category1,categoryk`) ... A comma seperated list of categories. Return results restricted to only the categories specified (OR). When not present, searches all categories.

### Category Search API [GET]



+ Response 200

    [Search Endpoint][]
    
## Full text search [/catalog/v1{?q}]
+ Parameters
    + q (optional, string, `potholes`) ... A string for full text search

### Full text search API [GET]


+ Response 200

    [Search Endpoint][]


## Pagination [/catalog/v1{?from,size}]
The search service allows pagination of results.  By default, we will return 1000 results.
+ Parameters
    + from (optional, number, `23`) ... Initial starting point for paging (0 by default)
    + size (optional, number, `1000`) ... Number of results to return (1000 by default)

### Pagination API [GET]



+ Response 200

    [Search Endpoint][]


## Limiting results to specific resource types [/catalog/v1{?only}]
+ Parameters
    + only (optional, list[string], `pages`) ... Limit results to a particular resource type (`pages`, `datasets`). If not present searches all types


### Resource search API [GET]


+ Response 200

    [Search Endpoint][]

## Including additional render metadata  [/catalog/v1{?include_internal_metadata}]

+ Parameters
    + include_internal_metadata (optional, boolean, `true`) ... Results return with additional rendering metadata useful to frontend. If not present, assumed false

### Internal metadata API [GET]


+ Response 200
    
    [Search Endpoint][]

## Complete Search API [/catalog/v1{?domains,categories,tags,q,from,size,only,include_internal_metadata,highlight}]

+ Parameters
    + domains (optional, list[string], `cname1,cname2`) ... A comma seperated list of cnames. Returns results restricted to only the domains in the list. When not present, searches the entire catalog.
    + categories (optional, list[string], `category1,categoryk`) ... A comma seperated list of categories. Return results restricted to only the categories specified (OR). When not present, searches all categories.
    + tags (optional, list[string], `tag1,tag2`) ... A comma seperated list of tags. Return results restricted to only the tags specified (OR). When not present, searches all tags.
    + q (optional, string, `potholes`) ... A string for full text search
    + from (optional, number, `23`) ... Initial starting point for paging (0 by default)
    + size (optional, number, `1000`) ... Number of results to return (1000 by default)
    + only (optional, list[string], `pages`) ... Limit results to a particular resource type (`pages`, `datasets`). If not present searches all types
    + include_internal_metadata (optional, boolean, `true`) ... Results return with additional rendering metadata useful to frontend. If not present, assumed false
    + highlight (optional, boolean, `true`) ... Include highlighting information

### Search API with all options [GET]


+ Response 200 

    [Search Endpoint][]


 
