FORMAT: 1A

HOST:api.us.test-socrata.com/api

# Cetera -- Search Service

Features may not be implemented yet (such as the `highlight` option); however, we wish to future proof the API against version changes.
The flag `include_internal_metadata` should be set to `true` for the frontend, although its presence (or lack of presence) may be ignored for now.
Once we understand the behavior for the civic hacker, we will optimize the use case to return the appropriate, less verbose payload.
Given that our internal resource names will change, we will require external documentation that shares the resource that a civic hacker can use to load a dataset or page from its id.

All calls will return a JSON object containing the list of datasets and pages in the relevance that is appropriate to the query in a field called `results`. This `results` array contains an array of hashes. Each hash contains a key `resource` containing the resource to be returned. Hashes may contain additional fields to `resource` including metadata about the resource, such as the `classification` object. Each resource will be either a page or a dataset.

Pages and datasets may be distinguished by the `type` field. This is set to `dataset` for datasets and to `page` for pages. Additionally, the bodies differ from each other as follows:

 - Pages include the fields `pageId`, `datasetId`, and `cards`,
 - Datasets include the fields `id` and `columns`.

With the exception of the additional `type` field, the objects in the `resources` field are unaltered from their representation in whatever owns their truth.

*Please note that we assume that all calls include either the `X-App-Token` header or the ``$$app_token`` parameters set to a valid token. This is assumed and not documented in the API spec below.*

# Search Endpoint [/catalog/v1]

+ Model (application/json)

            {
              "results": [
                {
                  "classification": {
                    "tags":["tag1", "tag2"],
                    "category":"Public Health"
                  },
                    
                  "resource": {
                    "type":"dataset",
                    "columns": {
                      "location_state": {
                        "cardinality": 1,
                        "description": "A location (state)",
                        "fred": "category",
                        "name": "Location (state)",
                        "physicalDatatype": "text"
                      },
                      "city": {
                        "cardinality": 15,
                        "description": "City for the Public Library",
                        "fred": "category",
                        "name": "CITY",
                        "physicalDatatype": "text"
                      },
                      "zipcode": {
                        "cardinality": 23,
                        "description": "5 digit postal Zip Code for the Public Library",
                        "fred": "category",
                        "name": "ZIPCODE",
                        "physicalDatatype": "number"
                      }
                    },
                    "defaultPage": "5b5c-jj6z",
                    "description": "Locations of all Montgomery County, MD Public Libraries.",
                    "domain": "moco-migrationtest.demo.socrata.com",
                    "id": "xqvj-wiwq",
                    "locale": "en_US",
                    "name": "Libraries",
                    "ownerId": "h6pt-apgn",
                    "rowDisplayUnit": "row",
                    "updatedAt": "2015-01-06T16:59:37.000-08:00",
                    "version": 1
                  }
                },
                {
                  "resource": {
                    "type":"page",
                    "cards": [
                      {
                        "appliedFilters": [],
                        "cardSize": 2,
                        "cardType": "Column",
                        "description": "Supervisor district",
                        "expanded": false,
                        "fieldName": ":@computed_region_p3v4_2swa",
                        "name": "District"
                     }
                    ],
                    "datasetId": "xqvj-wiwq",
                    "description": "Locations of all Montgomery County, MD Public Libraries.",
                    "name": "Libraries",
                    "pageId": "5b5c-jj6z",
                    "primaryAmountField": null,
                    "primaryAggregation": null,
                    "version": 1
                  }
                }
              ]
            }




## Searching particular domains [/catalog/v1{?domains}]
When no `domain` parameter is passed, the search service returns results from the entire corpus.

+ Parameters
    + domains (optional, list[string], `data.seattle.gov,data.kingcounty.gov`) ... A comma seperated list of cnames. Returns results restricted to only the domains in the list. When not present, searches the entire catalog.
    

### Domain Search API [GET]

+ Response 200
    
    [Search Endpoint][]

## Searching particular categories [/catalog/v1{?categories}]
When no `categories` parameter is passed, the search service returns results from the entire set of categories.
    
+ Parameters
    + categories (optional, list[string], `category1,categoryk`) ... A comma seperated list of categories. Return results restricted to only the categories specified (OR). When not present, searches all categories.

### Category Search API [GET]

+ Response 200

    [Search Endpoint][]
    
## Full text search [/catalog/v1{?q}]
Full text search will perform a query against all documents in the corpus. Specifically, we will query the fields `name, description, category` as well as the fields representing `column fieldnames, names and description`.

+ Parameters
    + q (optional, string, `potholes`) ... A string for full text search

### Full text search API [GET]

+ Response 200

    [Search Endpoint][]


## Pagination [/catalog/v1{?offset,limit}]
The search service allows pagination of results.  By default, we will return at most 100 results starting from 0.
+ Parameters
    + offset (optional, number, `23`) ... Initial starting point for paging (0 by default)
    + limit (optional, number, `47`) ... Number of results to return (100 max/default)

### Pagination API [GET]

+ Response 200

    [Search Endpoint][]


## Limiting results to specific resource types [/catalog/v1{?only}]
The search service currently indexes datasets and pages with new resource types to be added in the future.  The caller can restrict the results to a particular type (`pages`, `datasets`) by specifying this parameter.

+ Parameters
    + only (optional, list[string], `pages`) ... Limit results to a particular resource type (`pages`, `datasets`). If not present searches all types


### Resource search API [GET]

+ Response 200

    [Search Endpoint][]

## Including additional render metadata  [/catalog/v1{?include_internal_metadata}]
By default (not yet implemented), the search service will only return result data that is useful to a general caller. For the frontend, where additional metadata is stored and may be useful, you can set this flag to true in order to have additional metadata for rendering the dataset or page.

+ Parameters
    + include_internal_metadata (optional, boolean, `true`) ... Results return with additional rendering metadata useful to frontend. If not present, assumed false

### Internal metadata API [GET]

+ Response 200
    
    [Search Endpoint][]

## Complete Search API [/catalog/v1{?domains,categories,tags,q,offset,limit,only,include_internal_metadata,highlight}]
The full search API is detailed here, with some additional options such as `tags` and `highlight` which are not yet implemented.

+ Parameters
    + domains (optional, list[string], `cname1,cname2`) ... A comma seperated list of cnames. Returns results restricted to only the domains in the list. When not present, searches the entire catalog.
    + categories (optional, list[string], `category1,categoryk`) ... A comma seperated list of categories. Return results restricted to only the categories specified (OR). When not present, searches all categories.
    + tags (optional, list[string], `tag1,tag2`) ... A comma seperated list of tags. Return results restricted to only the tags specified (OR). When not present, searches all tags.
    + q (optional, string, `potholes`) ... A string for full text search
    + offset (optional, number, `23`) ... Initial starting point for paging (0 by default)
    + limit (optional, number, `1000`) ... Number of results to return (100 default/max)
    + only (optional, list[string], `pages`) ... Limit results to a particular resource type (`pages`, `datasets`). If not present searches all types
    + include_internal_metadata (optional, boolean, `true`) ... Results return with additional rendering metadata useful to frontend. If not present, assumed false
    + highlight (optional, boolean, `true`) ... Include highlighting information

### Search API with all options [GET]

+ Response 200 

    [Search Endpoint][]
    
    
## Listing Domains [/catalog/domains/v1]
The search service has the ability to return information regarding the domains in its index.  Return body and functionality to be determined

### Return all domains [GET]
    
+ Response 200
    
        {
            "message": "Not yet implemented"
        }


## Searching for tags [/catalog/tags/v1]
Returns aggregate tag statistics as well as a list of tags.  Return body and functionality to be determined

### Return tags [GET]

+ Response 200

        {
            "message": "Not yet implemented"
        }

## Searching for categories [/catalog/categories/v1]
Returns aggregate category statistics as well as a list of categories.  Return body and functionality to be determined

### Return categories [GET]

+ Response 200

        {
            "message": "Not yet implemented"
        }
